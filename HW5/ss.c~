#include <stdio.h>
int initBoard(char board[]);
void printBoard(char *board);
int isPieceMovable(char *board);
void getPosition(char *col, int *row);
int isValidCell(char col, int row);
int isKnightMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow);
int isRookMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow);
int isKingMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow);
int isQueenMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow);
int isBishopMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow);
int isPawnMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow);
int TasNerede(char col, int row);

/******************************************************************************/
void emptyBuffer()
{
	while ( getchar() != '\n' );
}
void main()
{
	char board [64];
	int initComplete = 0;
	char empty;
	
	int command;
	scanf("%d", &command);

	while(command!=4)
	{
		switch(command)
		{
			case 1: initBoard(board); 
				initComplete = 1; 
				printf("OK\n");
				break;
			case 2: 
				/*Read space character after command number*/
				scanf("%c", &empty);
				if (initComplete)
				{
					if(isPieceMovable(board))
						printf("YES\n");
					else
						printf("NO\n");
				}
				else
				{  
					printf("Board is not initialized!\n");
					emptyBuffer();
				}
				break;
			case 3: 
				if (initComplete)
					printBoard(board);
				else  
					printf("Board is not initialized!\n");
					emptyBuffer();
				break;

			default: printf("Invalid command!\n"); emptyBuffer(); break;

		}	
		
		scanf("%d", &command);
	
	}
}
/******************************************************************************/

int initBoard(char* board)
{
	int i;

	board[0]='r';
	board[1]='n';
	board[2]='b';
	board[3]='q';
	board[4]='k';
	board[5]='b';
	board[6]='n';
	board[7]='r';
	
	for(i=8; i<16; i++){
		
		board[i]='p';
	}
	board[56]='R';
	board[57]='N';
	board[58]='B';
	board[59]='Q';
	board[60]='K';
	board[61]='B';
	board[62]='N';
	board[63]='R';
	
	for(i=48; i<56; i++){
	
		board[i]='P';
	}
}
void printBoard(char *board){
	
	int i,j,k,m;
	int boyut;
	
	boyut=64;	
	
	i=0;
	j=8;
	printf("  a b c d e f g h\n");
	printf("  - - - - - - - -\n");
	printf("%d|",j--);
	
	for(k=1; i<boyut; k++){
	
		if(i==0 || i==8 || i==16 || i==24 || i==32 || i==40 || i==48 || i==56){
		
			board[i]=' ';
			printf("%c",board[i]);
		
		}
		else{
		
			board[i]=' ';
			printf(" %c",board[i]);
		}
		if(k%(8)==0){
		
			if(j!=0){
			
			printf("|\n");
			printf("%d|",j--);
			}
		
		}
		i++;
	}	
	printf("|\n");
	printf("  - - - - - - - -\n");		


}
void getPosition(char *col, int *row){

	scanf(" %c",col);
	scanf("%d",row);
	
	return;

}
int isValidCell(char col, int row){

	if(col=='a' || col=='b' || col=='c' || col=='d' || col=='e' || col=='f' || col=='g'){
	
		return 1;
	}
	else if(row==8 || row==7 || row==6 || row==5 || row==4 || row==3 || row==2 || row==1){
	
		return 1;
	}
	else
		return 0;
				
}
///////////////////////////////////////////////////////////////////////////////////
int isPieceMovable(char *board){

	int i;
	char sourceCol;
	int sourceRow;
	char targetCol;
	int targetRow;
	int col,row;
	
	getPosition(&sourceCol,&sourceRow);
	isValidCell(sourceCol,sourceRow);
	getPosition(&targetCol,&targetRow);
	isValidCell(targetCol,targetRow);
	i=TasNerede(sourceCol,sourceRow);
	
		switch(i){
	
			case 'p':
			case 'P':
					isPawnMovable(board, sourceCol, sourceRow, targetCol, targetRow);
					break; 
			case 'r':
			case 'R':
					isRookMovable(board, sourceCol, sourceRow, targetCol, targetRow);
					break;
			case 'n':
			case 'N':
					isKnightMovable(board, sourceCol, sourceRow, targetCol, targetRow);
					break;
			case 'b':
			case 'B':
					isBishopMovable(board, sourceCol, sourceRow, targetCol, targetRow);
					break;
			case 'q':
			case 'Q':
					isQueenMovable(board, sourceCol, sourceRow, targetCol, targetRow);
					break;
			case 'k':
			case 'K':
					isKingMovable(board, sourceCol, sourceRow, targetCol, targetRow);
					break;
		}
	
}
int isKnightMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow)
{
	int j;
	
	j=TasNerede(targetCol,targetRow);
	
	if(j==' ' || j>47){
	
		if(targetCol=sourceCol+2){
		
			if((targetRow=sourceRow+1) || (targetRow=sourceRow-1))
			
				return 1;
		}
		else if(targetCol=sourceCol-2){
	
			if((targetRow=sourceRow+1) || (targetRow=sourceRow-1))
		
				return 1;
		}
		else if(targetCol=sourceCol+1){
	
			if((targetRow=sourceRow+2) || (targetRow=sourceRow-2))
		
				return 1;
		}
		else if(targetCol=sourceCol-1){
	
			if((targetRow=sourceRow+2) || (targetRow=sourceRow-2))
		
				return 1;
		}
		else 
			return 0;
		
	}	
	else
		return 0;
}
int isRookMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow)
{

}
int isKingMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow)
{
}
int isQueenMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow)
{
}
int isBishopMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow)
{

}
int isPawnMovable(char *board, char sourceCol, int sourceRow, char targetCol, int targetRow)
{
	int j;
	
	j=TasNerede(targetCol,targetRow);
	
	if(j==' '){
	
		if(targetCol==sourceCol && targetRow==sourceRow+1)
		
			return 1;
		else
			return 0;
	}
	if((sourceRow+1 && sourceCol+1)!=' ' && (sourceRow+1 && sourceCol+1)>65){
		
		return 1;
	}
	else
		return 0;

}
int TasNerede(char col,int row){

	int j;
	char board[64];
	
	if(col=='a'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[0+j*8];
			j++;
		}
	}
	else if(col=='b'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[1+j*8];
			j++;
		}
	}
	else if(col=='c'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[2+j*8];
			j++;
		}
	}
	else if(col=='d'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[3+j*8];
			j++;
		}
	}
	else if(col=='e'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[4+j*8];
			j++;
		}
	}
	else if(col=='f'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[5+j*8];
			j++;
		}
	}
	else if(col=='g'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[6+j*8];
			j++;
		}
	}
	else if(col=='h'){
	
		j=0;
		for(row=8; row>0; row--){
		
			board[7+j*8];
			j++;
		}
	}

	

}
